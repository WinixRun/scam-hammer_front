---
import Layout from '../layouts/Layout.astro';
import FormularioReporte from '../components/FormularioReporte.astro';
import Buscador from '../components/Buscador.astro';
import Resultados from '../components/Resultados.astro';
import Confirmacion from '../components/Confirmacion.astro';
---

<Layout title='Bienvenido a Scamhammer.'>
  <main
    class='flex flex-col items-center justify-center min-h-screen max-w-7xl mx-auto px-4 py-4 space-y-8'
  >
    <div
      class='md:flex md:flex-row md:items-center md:justify-center w-full animate-fade-right'
    >
      <div class='md:w-1/2 pr-4 mr-6 mb-8 md:mb-0 text-center'>
        <h1 class='text-4xl font-bold mb-2 text-gradient'>SCAM LIST</h1>
        <p class='text-sm text-white mb-6'>
          Scamlist está diseñada para combatir campañas de mensajes fraudulentos
          recopilando información sobre ellos.
          <span class='text-[#56e0ff]'
            >Aquí puedes reportar y verificar SMS sospechosos</span
          > para contribuir a nuestra base de datos.
        </p>
        <p class='text-sm text-white'>
          <span class='text-[#56e0ff] font-bold'>AVISO IMPORTANTE:</span> La función
          de búsqueda no debe ser tomada como un verificador de mensajes legítimos
          en ningún caso.
          <span class='text-[#56e0ff] font-semibold'
            >Trata todos los mensajes desconocidos como potencialmente
            fraudulentos.</span
          >
        </p>
      </div>
      <div class='md:w-1/2 animate-fade-left'>
        <div
          id='buscador-container'
          class='card bg-gray-800 p-6 rounded-lg shadow-lg mb-4 animate-fade-left'
        >
          <Buscador />
          <div class='text-center mt-4'>
            <button
              id='reportar-button'
              class='py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primaryHover transition duration-500 ease-in-out transform hover:scale-105'
            >
              Reportar SMS fraudulento
            </button>
          </div>
        </div>
        <div
          id='formulario-container'
          class='hidden card bg-gray-800 p-6 rounded-lg shadow-lg animate-fade-up'
        >
          <FormularioReporte />
        </div>
        <div
          id='loader-container'
          class='hidden card bg-gray-800 p-6 rounded-lg shadow-lg animate-fade-up text-center'
        >
          <div id='loader'></div>
        </div>
        <div
          id='confirmacion-container'
          class='hidden card bg-gray-800 p-6 rounded-lg shadow-lg animate-fade-up text-center'
        >
          <Confirmacion />
          <button
            id='volver-inicio'
            class='w-full py-2 px-4 mt-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primaryHover transition duration-500 ease-in-out transform hover:scale-105'
          >
            Volver al Inicio
          </button>
        </div>
      </div>
    </div>
    <Resultados />
  </main>
</Layout>

<style>
  .text-gradient {
    background-image: linear-gradient(90deg, #cef9ff, #0099ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  .text-highlight {
    color: #56ebff;
  }
  .hidden {
    display: none;
  }
  .bg-gradient-primary {
    background: linear-gradient(90deg, #2cb3d9, #0582c0);
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', async function () {
    const { cardio } = await import('ldrs'); // Importar la librería de loaders
    cardio.register(); // Registrar el loader

    let csrfToken = '';

    const fetchCSRFToken = async () => {
      try {
        const response = await fetch('http://localhost:3000/api/csrf-token', {
          method: 'GET',
          credentials: 'include', // Incluye las cookies en la solicitud
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();
        csrfToken = data.csrfToken;
      } catch (error) {
        console.error('Error fetching CSRF token:', error);
      }
    };

    fetchCSRFToken();

    const reportarButton = document.getElementById('reportar-button');
    const volverBuscadorButton = document.getElementById('volver-buscador');
    const volverInicioButton = document.getElementById('volver-inicio');
    const buscadorContainer = document.getElementById('buscador-container');
    const resultadosContainer = document.getElementById('resultados-row');
    const formularioContainer = document.getElementById('formulario-container');
    const loaderContainer = document.getElementById('loader-container');
    const confirmacionContainer = document.getElementById(
      'confirmacion-container'
    );
    const loaderElement = document.getElementById('loader');

    reportarButton.addEventListener('click', () => {
      buscadorContainer.classList.add('hidden');
      resultadosContainer.classList.add('hidden');
      formularioContainer.classList.remove('hidden');
    });

    volverBuscadorButton.addEventListener('click', () => {
      formularioContainer.classList.add('hidden');
      buscadorContainer.classList.remove('hidden');
      resultadosContainer.classList.remove('hidden');
    });

    volverInicioButton.addEventListener('click', () => {
      confirmacionContainer.classList.add('hidden');
      buscadorContainer.classList.remove('hidden');
      resultadosContainer.classList.remove('hidden');
    });

    const form = document.getElementById('form-reporte');
    if (form instanceof HTMLFormElement) {
      form.addEventListener('submit', async function (event) {
        event.preventDefault();
        console.log('Formulario enviado'); // Depuración
        const formData = new FormData(form);
        const telefono = formData.get('telefono').toString();
        const enlace = formData.get('enlace').toString();
        const texto = formData.get('texto').toString();
        const data = {
          telefono,
          enlace,
          texto,
        };

        // Validar el número de teléfono
        if (!/^\+\d{1,3}\d{4,14}$/.test(data.telefono)) {
          alert(
            'Por favor, introduzca un número de teléfono válido con el código de país (e.g., +34XXXXXXXXX).'
          );
          return;
        }

        // Obtener el token CSRF desde las cookies
        const cookie = document.cookie
          .split('; ')
          .find((row) => row.startsWith('XSRF-TOKEN='));
        if (!cookie) {
          return;
        }

        const csrfToken = cookie.split('=')[1];

        try {
          formularioContainer.classList.add('hidden');
          loaderContainer.classList.remove('hidden');
          loaderElement.innerHTML =
            '<l-cardio size="50" class="" stroke="4" speed="2" color="#8FECFF"></l-cardio>';

          // Simular una solicitud con un tiempo mínimo de 1 segundo
          const delay = (ms) =>
            new Promise((resolve) => setTimeout(resolve, ms));
          await delay(1000);

          console.log('Realizando solicitud de reporte'); // Depuración
          const response = await fetch('/api/reports', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'CSRF-Token': csrfToken, // Enviar el token CSRF en el encabezado
            },
            credentials: 'include', // Asegúrate de enviar cookies con la solicitud
            body: JSON.stringify(data),
          });

          const responseData = await response.json();
          loaderContainer.classList.add('hidden');

          if (response.ok) {
            console.log('Reporte enviado exitosamente'); // Depuración
            confirmacionContainer.classList.remove('hidden');
          } else {
            console.error(
              'Error en la respuesta del servidor:',
              responseData.message
            ); // Depuración
            alert(`Error: ${responseData.message}`);
            formularioContainer.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Error al enviar el reporte:', error); // Depuración
          loaderContainer.classList.add('hidden');
          alert('Hubo un problema al enviar el reporte');
          formularioContainer.classList.remove('hidden');
        }
      });
    }
  });
</script>
